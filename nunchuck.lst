   1               		.file	"nunchuck.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 7365 7475 		.string	"setup error"
  12      7020 6572 
  12      726F 7200 
  13               		.text
  14               	.global	nck_init
  16               	nck_init:
  17               	.LFB6:
  18               		.file 1 "nunchuck.c"
   1:nunchuck.c    **** #import "nunchuck.h"
   2:nunchuck.c    **** 
   3:nunchuck.c    **** #import "i2c_master.h"
   4:nunchuck.c    **** #include <util/delay.h>
   5:nunchuck.c    **** 
   6:nunchuck.c    **** void nck_init(void) {
  19               		.loc 1 6 0
  20               		.cfi_startproc
  21 0000 CF93      		push r28
  22               	.LCFI0:
  23               		.cfi_def_cfa_offset 3
  24               		.cfi_offset 28, -2
  25 0002 DF93      		push r29
  26               	.LCFI1:
  27               		.cfi_def_cfa_offset 4
  28               		.cfi_offset 29, -3
  29 0004 00D0      		rcall .
  30 0006 00D0      		rcall .
  31               	.LCFI2:
  32               		.cfi_def_cfa_offset 8
  33 0008 CDB7      		in r28,__SP_L__
  34 000a DEB7      		in r29,__SP_H__
  35               	.LCFI3:
  36               		.cfi_def_cfa_register 28
  37               	/* prologue: function */
  38               	/* frame size = 4 */
  39               	/* stack size = 6 */
  40               	.L__stack_usage = 6
   7:nunchuck.c    ****     uint8_t data[] = {0xF0, 0x55, 0xFB, 0x00};
  41               		.loc 1 7 0
  42 000c 80EF      		ldi r24,lo8(-16)
  43 000e 8983      		std Y+1,r24
  44 0010 85E5      		ldi r24,lo8(85)
  45 0012 8A83      		std Y+2,r24
  46 0014 8BEF      		ldi r24,lo8(-5)
  47 0016 8B83      		std Y+3,r24
  48 0018 1C82      		std Y+4,__zero_reg__
   8:nunchuck.c    ****     if(i2c_transmit(NCK_ADDR, &data, 4)) {
  49               		.loc 1 8 0
  50 001a 44E0      		ldi r20,lo8(4)
  51 001c 50E0      		ldi r21,0
  52 001e BE01      		movw r22,r28
  53 0020 6F5F      		subi r22,-1
  54 0022 7F4F      		sbci r23,-1
  55 0024 82E5      		ldi r24,lo8(82)
  56 0026 0E94 0000 		call i2c_transmit
  57               	.LVL0:
  58 002a 8823      		tst r24
  59 002c 01F0      		breq .L1
  60               	.LBB6:
   9:nunchuck.c    ****         printf("setup error\n");
  61               		.loc 1 9 0
  62 002e 80E0      		ldi r24,lo8(.LC0)
  63 0030 90E0      		ldi r25,hi8(.LC0)
  64 0032 0E94 0000 		call puts
  65               	.LVL1:
  66               	.L1:
  67               	/* epilogue start */
  68               	.LBE6:
  10:nunchuck.c    ****     }
  11:nunchuck.c    ****     //_delay_ms(1);
  12:nunchuck.c    ****     //uint8_t data2[] = {0xFB, 0x00};
  13:nunchuck.c    ****     //twi_send(NCK_ADDR, &data2, 2, TWI_NOREPEAT);
  14:nunchuck.c    **** }
  69               		.loc 1 14 0
  70 0036 0F90      		pop __tmp_reg__
  71 0038 0F90      		pop __tmp_reg__
  72 003a 0F90      		pop __tmp_reg__
  73 003c 0F90      		pop __tmp_reg__
  74 003e DF91      		pop r29
  75 0040 CF91      		pop r28
  76 0042 0895      		ret
  77               		.cfi_endproc
  78               	.LFE6:
  80               		.section	.rodata.str1.1
  81               	.LC1:
  82 000c 7265 6365 		.string	"receive error"
  82      6976 6520 
  82      6572 726F 
  82      7200 
  83               	.LC2:
  84 001a 7472 616E 		.string	"transmit error"
  84      736D 6974 
  84      2065 7272 
  84      6F72 00
  85               		.text
  86               	.global	nck_read_data
  88               	nck_read_data:
  89               	.LFB7:
  15:nunchuck.c    **** 
  16:nunchuck.c    **** void nck_read_data(struct NCK* data) {
  90               		.loc 1 16 0
  91               		.cfi_startproc
  92               	.LVL2:
  93 0044 0F93      		push r16
  94               	.LCFI4:
  95               		.cfi_def_cfa_offset 3
  96               		.cfi_offset 16, -2
  97 0046 1F93      		push r17
  98               	.LCFI5:
  99               		.cfi_def_cfa_offset 4
 100               		.cfi_offset 17, -3
 101 0048 CF93      		push r28
 102               	.LCFI6:
 103               		.cfi_def_cfa_offset 5
 104               		.cfi_offset 28, -4
 105 004a DF93      		push r29
 106               	.LCFI7:
 107               		.cfi_def_cfa_offset 6
 108               		.cfi_offset 29, -5
 109 004c CDB7      		in r28,__SP_L__
 110 004e DEB7      		in r29,__SP_H__
 111               	.LCFI8:
 112               		.cfi_def_cfa_register 28
 113 0050 2797      		sbiw r28,7
 114               	.LCFI9:
 115               		.cfi_def_cfa_offset 13
 116 0052 0FB6      		in __tmp_reg__,__SREG__
 117 0054 F894      		cli
 118 0056 DEBF      		out __SP_H__,r29
 119 0058 0FBE      		out __SREG__,__tmp_reg__
 120 005a CDBF      		out __SP_L__,r28
 121               	/* prologue: function */
 122               	/* frame size = 7 */
 123               	/* stack size = 11 */
 124               	.L__stack_usage = 11
 125 005c 8C01      		movw r16,r24
  17:nunchuck.c    ****     uint8_t raw[6];
  18:nunchuck.c    ****     if(i2c_receive(NCK_ADDR, &raw, 6)) {
 126               		.loc 1 18 0
 127 005e 46E0      		ldi r20,lo8(6)
 128 0060 50E0      		ldi r21,0
 129 0062 BE01      		movw r22,r28
 130 0064 6F5F      		subi r22,-1
 131 0066 7F4F      		sbci r23,-1
 132 0068 82E5      		ldi r24,lo8(82)
 133               	.LVL3:
 134 006a 0E94 0000 		call i2c_receive
 135               	.LVL4:
 136 006e 8823      		tst r24
 137 0070 01F0      		breq .L8
 138               	.LBB7:
  19:nunchuck.c    ****         printf("receive error\n");
 139               		.loc 1 19 0
 140 0072 80E0      		ldi r24,lo8(.LC1)
 141 0074 90E0      		ldi r25,hi8(.LC1)
 142 0076 0E94 0000 		call puts
 143               	.LVL5:
 144               	.L8:
 145               	.LBE7:
 146               	.LBB8:
 147               	.LBB9:
 148               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 149               		.loc 2 164 0
 150 007a 2FEF      		ldi r18,lo8(63999)
 151 007c 39EF      		ldi r19,hi8(63999)
 152 007e 40E0      		ldi r20,hlo8(63999)
 153 0080 2150      		1: subi r18,1
 154 0082 3040      		sbci r19,0
 155 0084 4040      		sbci r20,0
 156 0086 01F4      		brne 1b
 157 0088 00C0      		rjmp .
 158 008a 0000      		nop
 159               	.LBE9:
 160               	.LBE8:
  20:nunchuck.c    ****     }
  21:nunchuck.c    **** 
  22:nunchuck.c    ****     _delay_ms(20);
  23:nunchuck.c    ****     uint8_t send[] = {0x00};
 161               		.loc 1 23 0
 162 008c 1F82      		std Y+7,__zero_reg__
  24:nunchuck.c    ****     //for(uint8_t i=0; i<3; i++) {
  25:nunchuck.c    ****         if(i2c_transmit(NCK_ADDR, &send, 1)) {
 163               		.loc 1 25 0
 164 008e 41E0      		ldi r20,lo8(1)
 165 0090 50E0      		ldi r21,0
 166 0092 BE01      		movw r22,r28
 167 0094 695F      		subi r22,-7
 168 0096 7F4F      		sbci r23,-1
 169 0098 82E5      		ldi r24,lo8(82)
 170 009a 0E94 0000 		call i2c_transmit
 171               	.LVL6:
 172 009e 8823      		tst r24
 173 00a0 01F0      		breq .L9
 174               	.LBB10:
  26:nunchuck.c    ****             printf("transmit error\n");
 175               		.loc 1 26 0
 176 00a2 80E0      		ldi r24,lo8(.LC2)
 177 00a4 90E0      		ldi r25,hi8(.LC2)
 178 00a6 0E94 0000 		call puts
 179               	.LVL7:
 180               	.L9:
 181               	.LBE10:
  27:nunchuck.c    ****         }
  28:nunchuck.c    ****     //}
  29:nunchuck.c    **** 
  30:nunchuck.c    ****     data->buttons = (raw[5] & 0x03);
 182               		.loc 1 30 0
 183 00aa 2E81      		ldd r18,Y+6
 184 00ac 822F      		mov r24,r18
 185 00ae 8370      		andi r24,lo8(3)
 186 00b0 F801      		movw r30,r16
 187 00b2 8083      		st Z,r24
  31:nunchuck.c    ****     data->sx = raw[0];
 188               		.loc 1 31 0
 189 00b4 8981      		ldd r24,Y+1
 190 00b6 8183      		std Z+1,r24
  32:nunchuck.c    ****     data->sy = raw[1];
 191               		.loc 1 32 0
 192 00b8 8A81      		ldd r24,Y+2
 193 00ba 8283      		std Z+2,r24
  33:nunchuck.c    ****     data->ax = (raw[2]<<2) | ((raw[5]>>2) & 0x03);
 194               		.loc 1 33 0
 195 00bc 322F      		mov r19,r18
 196 00be 3695      		lsr r19
 197 00c0 3695      		lsr r19
 198 00c2 3370      		andi r19,lo8(3)
 199 00c4 8B81      		ldd r24,Y+3
 200 00c6 F4E0      		ldi r31,lo8(4)
 201 00c8 8F9F      		mul r24,r31
 202 00ca C001      		movw r24,r0
 203 00cc 1124      		clr __zero_reg__
 204 00ce 832B      		or r24,r19
 205 00d0 F801      		movw r30,r16
 206 00d2 9483      		std Z+4,r25
 207 00d4 8383      		std Z+3,r24
  34:nunchuck.c    ****     data->ay = (raw[3]<<2) | ((raw[5]>>4) & 0x03);
 208               		.loc 1 34 0
 209 00d6 322F      		mov r19,r18
 210 00d8 3295      		swap r19
 211 00da 3370      		andi r19,lo8(3)
 212 00dc 8C81      		ldd r24,Y+4
 213 00de F4E0      		ldi r31,lo8(4)
 214 00e0 8F9F      		mul r24,r31
 215 00e2 C001      		movw r24,r0
 216 00e4 1124      		clr __zero_reg__
 217 00e6 832B      		or r24,r19
 218 00e8 F801      		movw r30,r16
 219 00ea 9683      		std Z+6,r25
 220 00ec 8583      		std Z+5,r24
  35:nunchuck.c    ****     data->az = (raw[4]<<2) | ((raw[5]>>6) & 0x03);
 221               		.loc 1 35 0
 222 00ee 2295      		swap r18
 223 00f0 2695      		lsr r18
 224 00f2 2695      		lsr r18
 225 00f4 2370      		andi r18,lo8(3)
 226 00f6 8D81      		ldd r24,Y+5
 227 00f8 F4E0      		ldi r31,lo8(4)
 228 00fa 8F9F      		mul r24,r31
 229 00fc C001      		movw r24,r0
 230 00fe 1124      		clr __zero_reg__
 231 0100 822B      		or r24,r18
 232 0102 F801      		movw r30,r16
 233 0104 9087      		std Z+8,r25
 234 0106 8783      		std Z+7,r24
 235               	/* epilogue start */
  36:nunchuck.c    **** }
 236               		.loc 1 36 0
 237 0108 2796      		adiw r28,7
 238 010a 0FB6      		in __tmp_reg__,__SREG__
 239 010c F894      		cli
 240 010e DEBF      		out __SP_H__,r29
 241 0110 0FBE      		out __SREG__,__tmp_reg__
 242 0112 CDBF      		out __SP_L__,r28
 243 0114 DF91      		pop r29
 244 0116 CF91      		pop r28
 245 0118 1F91      		pop r17
 246 011a 0F91      		pop r16
 247               	.LVL8:
 248 011c 0895      		ret
 249               		.cfi_endproc
 250               	.LFE7:
 252               	.Letext0:
 253               		.file 3 "/usr/lib/avr/include/stdint.h"
 254               		.file 4 "nunchuck.h"
 255               		.file 5 "<built-in>"
 256               		.file 6 "i2c_master.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nunchuck.c
     /tmp/ccqRyE7U.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccqRyE7U.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccqRyE7U.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccqRyE7U.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccqRyE7U.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccqRyE7U.s:16     .text:0000000000000000 nck_init
     /tmp/ccqRyE7U.s:88     .text:0000000000000044 nck_read_data

UNDEFINED SYMBOLS
i2c_transmit
puts
i2c_receive
__do_copy_data
